# PHASE 1: Project Scaffolding and Authentication

gh issue create --title "Initialize Expo project structure with Router and dependencies" --body "Description: Scaffold the base Expo Router project ensuring the navigation hierarchy is in place. Verify that the Expo Router is configured with a root stack and grouped tab navigation. The initial structure should include the main tab group app/(tabs)/ with placeholders for Dashboard Symptoms Assistant and Profile screens as already partially present and a group for auth flows app/(auth)/ for login/sign-up screens. Install and configure necessary dependencies: Supabase JS client @supabase/supabase-js React Native Reusables UI library and any required voice/AI libraries. Confirm that the app runs on both iOS and Android without errors. This issue sets up the skeleton so other features can plug in. File Paths: Ensure app/_layout.tsx root Stack navigator and app/(tabs)/_layout.tsx Tab navigator are correctly set up the tab bar with 4 tabs is defined in _layout.tsx inside tabs group. Include empty or placeholder screens if needed: e.g. app/(tabs)/assistant.tsx even if blank for now so navigation to it works. Also add app/(auth)/_layout.tsx Stack for auth and placeholder sign-in.tsx / sign-up.tsx screens to be implemented in next issue. Integrate the Inter font already being loaded and any global styles. Update app.json as needed for app name and icons if not done. Component Reuse: Use the base components created in Phase 0 for any placeholder UI e.g. a BaseButton on a dummy screen. Data Sources: N/A for scaffolding no data fetched yet. Expo Router Navigation: The navigation rules should have the auth stack and main app separated. Initially one can configure conditional routing later in auth issue but here ensure the file structure is ready. The root layout should include Stack.Screen name auth and Stack.Screen name tabs with appropriate options tabs stack is already added add auth. No screens are protected yet just structured. Acceptance Criteria: 1. The project runs with the new file structure: bottom tab navigator appears with 4 tabs Dashboard Symptoms Assistant Profile with icons and titles set as in design. Navigating between tabs works even if content is placeholder. 2. Expo Router is properly configured no runtime errors about missing routes. 3. Supabase and other libraries are installed and minimal initialization done e.g. a lib/supabase.ts that creates a client with URL and anon key ready for use. 4. The overall foundation is laid for subsequent issues auth screens etc without requiring major refactoring." --label "phase:1,expo,typescript"

gh issue create --title "Integrate Supabase client and configure RLS authentication" --body "Description: Set up the Supabase connection in the app and ensure that Row Level Security RLS is respected through authenticated requests. Initialize the Supabase client with the project URL and anon public key and test connectivity. The Supabase instance should be configured to include the users JWT in requests so that RLS policies apply. For example enable supabase.auth.onAuthStateChange to capture the JWT. Confirm that the necessary RLS policies are in place on the backend e.g. the user_symptoms medical_consultations user_medical_profiles tables all have policies restricting data to the logged-in user. If those tables dont exist yet stub them or coordinate creation see Phase 2 for actual schema creation. This issue is about configuring auth at the API layer: when a user logs in their Supabase session JWT will be used for subsequent data fetches to enforce RLS. File Paths: Create lib/supabase.ts exporting a configured Supabase client. This will import createClient from supabase-js and use process.env.SUPABASE_URL and SUPABASE_ANON_KEY. Ensure to set auth persistSession true and storage to AsyncStorage if needed for React Native. Update any data-fetching code later issues to import this client. No UI file changes except possibly providing a context or hooking the auth state. Component Reuse: N/A this is integration logic. Possibly use the logger to log auth state changes. Data Sources: Supabase backend. Relevant tables with RLS Phase 2 will set them up. E.g. verify that auth.uid() is used in policies like in the design. Expo Router Navigation: N/A for navigation. However ensure that unauthenticated requests to Supabase are handled e.g. if a user is not logged in certain screens should not fetch data or will get 401 due to RLS this will tie into route guarding in a later issue. Acceptance Criteria: 1. The app can successfully connect to Supabase. No runtime errors occur when calling the Supabase client. 2. Supabase JWT is included in requests after login so that the backend knows the users identity. 3. It is confirmed by testing with a dummy fetch or using the database GUI that RLS policies are effective e.g. if a logged-in user queries a protected table they only get their records and if not logged in they get an auth error. 4. The groundwork is laid so that when the user authenticates via Supabase Auth next issue their session is used for all data operations automatically." --label "phase:1,backend,supabase,auth,RLS"

gh issue create --title "Implement user sign-up and login screens with Supabase Auth" --body "Description: Develop dedicated authentication screens for user registration and login. Create app/(auth)/sign-up.tsx and app/(auth)/sign-in.tsx with forms for email and password input and any basic validation. Use reusable form components text inputs and buttons from Phase 0. Leverage Supabase Auth API for creating accounts and signing in using the supabase clients auth.signUp and auth.signInWithPassword methods. Handle success and error states: on success the Supabase client will have the user session; on error e.g. email already in use wrong password display an appropriate message on the form. Include a toggle or link to switch between the sign-up and sign-in screens e.g. Have an account? Sign In. Also consider implementing basic password strength or format checks for better UX. Ensure that after sign-up the new user is also logged in Supabase does this by default. File Paths: app/(auth)/sign-up.tsx app/(auth)/sign-in.tsx. Possibly update app/(auth)/_layout.tsx if needed to allow a header or to ensure the stack screens show appropriate titles or use a custom header component with app logo. Also in app/_layout.tsx root include the auth group in the Stack with initialRouteName logic in next issue. Component Reuse: Use BaseTextInput and BaseButton for the form fields. These screens should align with the apps styling e.g. center content maybe include the app name or logo at top. Data Sources: Supabase Auth auth.users table managed by Supabase. No direct DB table manipulation needed just call the auth endpoints. Expo Router Navigation: After successful login or sign-up navigate the user to the main app tabs. Initially you can push the tabs stack or reset navigation. In the next issue well enforce this automatically but for now ensure a manual redirect on success. The sign-up screen should have a link to go to sign-in maybe using router.replace and vice versa. Acceptance Criteria: 1. Users can create a new account with email and password and log in with those credentials. Both flows sign-up sign-in are fully functional. 2. Validation: the screens prevent submission if fields are empty and display Supabase error messages e.g. Invalid login credentials or Password too short if such rules exist. 3. After a successful login or account creation the apps state reflects an authenticated user Supabase provides a user object. The user is redirected to the main Dashboard screen. 4. The UI is user-friendly: includes labels/placeholders for inputs and a toggle link between registering and logging in." --label "phase:1,frontend,auth,expo,supabase"

gh issue create --title "Enforce authenticated access and navigation flow" --body "Description: Implement route guarding so that only authenticated users can access the main app screens. Using Expo Routers capabilities ensure that on app launch the user is directed to the appropriate stack: if a Supabase session token is present user already logged in show the tabs screens; if not present the auth screens. This may involve checking supabase.auth.getSession() on app load or listening to the auth state. One approach: in the root layout before rendering decide which navigation to load possibly by maintaining an AuthContext or using Expo Routers new Redirect mechanism in layout. Alternatively you can keep both auth and tabs in the stack but conditionally redirect in the index of the auth stack if user exists. Also ensure that a logged-in user who opens the app doesnt briefly see the login screen handle session restoration silently on launch. Provide a logout mechanism as well: e.g. a Log Out button in the Profile tab that calls supabase.auth.signOut() and then resets navigation to the auth flow. File Paths: Possibly modify app/_layout.tsx or create a new app/(auth)/index.tsx that checks auth status. The simplest pattern is: in RootLayout app/_layout if a user is logged in check a global auth store or Supabase clients current session push directly into tabs; otherwise into auth. If Expo Router doesnt allow conditional initial route easily implement an AuthContext provider at root and inside screens use it to Redirect as needed see Expo docs on protected routes. Update app/(tabs)/profile.tsx to include a logout button temporary placement to handle sign-out logic and navigation. Component Reuse: Use a BaseButton for the logout action in Profile e.g. a red Log Out at bottom. Data Sources: Supabase Auth session. No new data just checking existing session or listening to onAuthStateChange. Expo Router Navigation: This issue is specifically about navigation rules: unauthenticated users should only see auth screens until they log in; authenticated users should bypass auth screens. After logout user is returned to sign-in. Also consider using Stack.Screen options to hide back buttons on auth screens so user cant back-swipe into main app without logging in. Acceptance Criteria: 1. If a user is not logged in navigating to the app shows the Sign In/Up flow. The user cannot access Dashboard or other main screens e.g. if they manually try to route it should redirect back to login. 2. If a user is already logged in session persisted from a previous run the app should skip the auth screens and go straight to the Dashboard no flicker of login screen. 3. Logging out via the Profile tab or another obvious place immediately redirects to the Sign In screen and clears the session. 4. The implementation should be robust against race conditions e.g. wait for supabase.auth.getSession() to resolve before deciding route. No unauthorized content should be visible to non-users thanks to this guard." --label "phase:1,frontend,auth,expo,supabase"

# CREATED - JUNE 19 - 2025
# Creating issue in savevsgames/Symptom_Savior
# https://github.com/savevsgames/Symptom_Savior/issues/4
# Creating issue in savevsgames/Symptom_Savior
# https://github.com/savevsgames/Symptom_Savior/issues/5
# Creating issue in savevsgames/Symptom_Savior
# https://github.com/savevsgames/Symptom_Savior/issues/6
# Creating issue in savevsgames/Symptom_Savior
# https://github.com/savevsgames/Symptom_Savior/issues/7