# PHASE 4: Profile & Context Injection
gh issue create --title "Implement Personal Information screen and update profile data" --body "Description: Allow the patient to view and edit their basic personal details. When the user selects Personal Information from the Profile menu navigate to a new screen where they can input data like age gender and possibly name or contact info. Utilize the user_medical_profiles table to store this. Fields to include: age number gender text or select from options and perhaps basic info like height/weight if needed not specified skip if not needed. The user_medical_profiles table already links to user_id and has these fields. On this screen fetch the existing profile if any for the user via Supabase e.g. select age gender where user_id = currentUser. Populate the form if data exists. Allow editing the fields and a Save button to upsert the record supabase.from user_medical_profiles .upsert. If the user is new and no profile row exists upsert will create it. After saving perhaps show a confirmation Profile updated. Also update the Profile main screen to display the saved info like show age and gender in the subtitle or a part of the UI. For now the main Profile screen can remain mostly static but at least the name and email shown could come from auth Supabase auth user object for name/email. Ensure RLS on user_medical_profiles allows only that user to upsert/view their profile. File Paths: app/(tabs)/profile/personal-info.tsx or similar route within profile section. If using nested navigation create an _layout.tsx in app/(tabs)/profile/ and screens for each submenu Personal Info Medical History etc. Alternatively navigate to a separate route outside tabs for editing profile. Choose convenient approach perhaps within tabs group for simplicity. Also update app/(tabs)/profile.tsx to navigate to this new screen on press of the Personal Information item use router.push /(tabs)/profile/personal-info. Component Reuse: Use BaseTextInputs for each field e.g. an input for Age but ensure numeric keyboard a picker or radio for Gender. Use BaseButton for Save. Maintain consistent padding and style as the rest of profile screens. Data Sources: Supabase user_medical_profiles table. Fields of interest: age gender possibly emergency_contact could include in a future extension. For now focus on whats asked age gender. Expo Router Navigation: Tapping Personal Information in Profile navigates to the Personal Info screen. After saving you might auto-pop or show a back button to return. If needed use router.back() on save to go back to profile screen and maybe pass updated data or simply re-fetch profile when back on main profile could add a listener or just rely on useEffect refresh. Acceptance Criteria: 1. The user can navigate to a Personal Information form that displays their current age and gender if previously saved or is blank if not. They can update these values. 2. Upon tapping Save the profile info is saved to Supabase. Verify that the user_medical_profiles table has the correct data for that user and only one row per user ideally as upserted. 3. The app reflects changes: e.g. if age was added perhaps the Profile screen could show Age: X somewhere though the design didnt explicitly show it it could be integrated or at least verify via a re-fetch that its stored. 4. RLS is respected users cannot edit others profiles. This is inherent if using Supabase with the users JWT and table policy but its good to ensure the upsert includes user_id as auth.uid or let database default it. 5. The UI and workflow are user-friendly: validation on inputs e.g. age must be a positive number gender could be restricted to certain values or free text and feedback after saving toast or checkmark so the user knows its done." --label "phase:4,frontend,supabase,RLS,expo"

gh issue create --title "Implement Medical History screen for conditions medications allergies" --body "Description: Provide an interface for users to manage their medical history details specifically chronic conditions medications and allergies. This is accessible via the Medical History item in the Profile menu. Create a screen that lists these categories with the ability to add/remove items for each. For example under Conditions the user can list things like Diabetes Hypertension; under Medications list current medications; under Allergies list known allergies. Use the user_medical_profiles table fields: medical_conditions medications allergies which are arrays of text. Implementation: fetch the profile same as in Personal Info to get current arrays. Use a UI that allows editing a list possibly a series of TextInput chips or a multi-line textarea separated by commas or a custom component similar to the triggers selection. Given time a simple approach is to have three TextInput fields where user enters a comma-separated list for each category and on save split by comma and trim into arrays. Alternatively allow adding one by one: e.g. an Add Condition button that opens an Alert prompt to input then update state array. For MVP the comma-separated or newline-separated input might be simplest. After editing Save the same way via upsert to user_medical_profiles with updated arrays. If the Personal Info screen is done you could combine them into one profile form but since the menu separates them well do separate screen for Medical History. Ensure to merge with any existing data e.g. if the personal info issue created a profile row we update that row same upsert logic including age/gender untouched if not editing them here. Alternatively fetch the current profile at screen mount allow editing only the relevant fields. File Paths: app/(tabs)/profile/medical-history.tsx or similar. Link it from Profile main screens Medical History item. This screen structure is similar to Personal Info but with multiple list fields. Component Reuse: Possibly reuse a Chip selection component like from Add Symptom for triggers to allow adding multiple entries. Could even pre-fill some common conditions or meds for convenience but that might be beyond scope. Use BaseButton for adding if you go one-by-one route. Data Sources: Supabase user_medical_profiles fields: medical_conditions medications allergies all text arrays. Ensure the upsert includes these arrays properly Supabase JS might expect an array of strings. Expo Router Navigation: Tapping Medical History in Profile goes to this screen. After save navigate back or indicate success. Acceptance Criteria: 1. The user can add or edit their medical history details: conditions medications allergies. For example they can list Asthma in conditions Ibuprofen in medications Peanuts in allergies etc. Multiple items can be added in each category. 2. Saving stores these arrays in the database for that user. Verify by checking user_medical_profiles table that those fields contain the entered values. If a profile row didnt exist before it should be created with user_id and possibly age/gender null unless set. If it existed it should be updated with new values. 3. When reopening the Medical History screen previously saved items are loaded and displayed confirming persistence. 4. The UI is clear on how to add multiple items. If using comma-separated input instruct the user accordingly; if using dynamic add show each item as a tag or list with a remove option. 5. The data remains private to the user RLS enforced. There are no crashes or weird behaviors when lists are empty vs populated." --label "phase:4,frontend,supabase,RLS,expo"

gh issue create --title "Incorporate user profile context into AI assistant responses" --body "Description: Enhance the AI assistants answers by providing it with the users profile information as context. The AI TxAgent can give more personalized and accurate advice if it knows the patients age gender medical conditions and recent symptoms. Implement this by modifying the AI query request or ensuring the backend uses the profile data. Two possible approaches: 1 Client-side injection: When calling the /api/medical-consultation include the relevant profile data in the request. For instance you could send profile: age X gender Y medical_conditions in the JSON. The TxAgent container would need to use this assuming its configured to accept such a field. Or include it as part of the query text e.g. prepend Patient is a 45-year-old male with history of diabetes. Question: user query. 2 Server-side context: Since the TxAgent has access to the shared database it could fetch user_medical_profiles by user_id the JWT identifies the user and with RLS it can select that row. This might already be implemented on that side in which case we just ensure the profile is populated. To be sure we can also send a flag or simply trust backend. Implement whichever is feasible now: a quick way is to prepend the profile to the users question on the client side. For example: before calling the API do: const fullQuery = Age: 30 Gender: F Conditions: Asthma + userQuestion. This will hint the model. Or use a structured field if the API spec allows not specified but we can extend. In any case ensure the AI knows things like age and conditions which could change its recommendations. Additionally ensure the language preference from profile is respected: if preferred_language in profile is set say user prefers Spanish either request the AI to respond in that language or handle TTS language selection. This could be advanced but at least note it: if profile says language = es we might add to query Answer in Spanish or use ElevenLabs voice matching that language. Voice preferences could also be used e.g. a specific ElevenLabs voice ID stored in profile. This might be beyond MVP but structure is there to use it. File Paths: The AI call in assistant.tsx where we prepare the request body. Also possibly in processMedicalQuery function on backend if we adjust server. Minimal client change: fetch profile from Supabase maybe at app start or when sending query and attach the data. Component Reuse: N/A mostly logic. Reuse supabase client to get profile if doing client-side injection. Data Sources: Supabase user_medical_profiles table for age gender conditions etc. Possibly also recent user_symptoms though TxAgent likely can query those itself. Expo Router Navigation: N/A. Acceptance Criteria: 1. The AIs answers become context-aware. For example if the users profile says they have diabetes and they ask What diet should I follow the AI might specifically mention diabetes-friendly diets. 2. To test one can input a profile age condition and ask a question that should depend on it. The response should differ when the profile is present vs not. E.g. profile: 70-year-old question about exercise answer should consider age. 3. The implementation securely provides profile data: no other users data is ever included due to RLS or how we fetch it. 4. There is minimal overhead or delay in providing this context. Fetching profile from Supabase is quick or cached; the prompt remains concise so as not to hit token limits. 5. This feature honors preferences: if preferred_language is set verify if the AI can respond in that language if supported or at least document that feature for future. For MVP primary focus is using medical conditions and age/gender context." --label "phase:4,ai,backend"

# CREATED - JUNE 19 - 2025
# Creating issue in savevsgames/Symptom_Savior
# https://github.com/savevsgames/Symptom_Savior/issues/18
# Creating issue in savevsgames/Symptom_Savior
# https://github.com/savevsgames/Symptom_Savior/issues/19
# Creating issue in savevsgames/Symptom_Savior
# https://github.com/savevsgames/Symptom_Savior/issues/20