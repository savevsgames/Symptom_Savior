#!/bin/bash

# PHASE 0: Dev Tools and Base Setup
gh issue create --title "Set up centralized logging for development and debugging" --body "Description: Implement a unified logging system to streamline debugging in development. Create a utility like util/logger.ts that wraps console.log with log levels debug info error and timestamps. Include an environment flag like DEBUG=true to toggle verbose logging. In development mode enable detailed logs including Supabase responses and AI API calls; in production silence debug logs or route them to a no-op. Ensure no sensitive PII is logged. Integrate this logger throughout the app instead of raw console.log so all logs can be toggled or redirected easily for example to an in-app debug screen or external service in the future. File Paths: Create util/logger.ts or similar and import it in various modules instead of using console directly. Update existing files in screens and API integration code to use logger.debug() and logger.error(). Component Reuse: N/A this is a non-UI utility. However ensure the logger can be imported globally. Data Sources: No direct data source. Use environment variable from Expo config for debug mode. Expo Router Navigation: N/A no UI/navigation changes for logging. Acceptance Criteria: 1. A logger utility is implemented with methods for different log levels. 2. Debug logs appear during development when enabled and can be easily toggled off via config or environment. 3. Existing modules use the new logger for consistency and no leftover console.log calls remain except in extreme cases like error boundary. 4. In production build debug logs do not clutter output they are disabled or minimal." --label "phase:0,frontend,expo,typescript"

gh issue create --title "Configure environment variable toggles and secret management" --body "Description: Introduce a robust configuration for environment-specific settings and feature toggles. Utilize a .env file with something like expo-env or built-in Expo config to store secrets such as SUPABASE_URL SUPABASE_ANON_KEY TXAGENT_URL and API keys ElevenLabs TavusAI. Implement a mechanism to load these into the app using expo-constants or a config plugin without exposing them in source control. Additionally define feature flags in the config like ENABLE_VOICE=true ENABLE_EMERGENCY_DETECTION=true to easily turn on/off optional features. This ensures the app can disable incomplete or sensitive features in production by flipping a config. Document the needed .env keys in a sample .env.example file. File Paths: Update app.json or expo.config.js to read from .env. Create .env.example with placeholders. In code access these via process.env or Expo Constants like Constants.manifest.extra. For example a config.ts module can export Config.supabaseUrl Config.enableVoice etc. Component Reuse: N/A internal config. Just ensure any place requiring API keys Supabase init AI fetch calls uses the config values. Data Sources: Environment variables for Supabase keys AI API keys etc loaded at runtime. Expo Router Navigation: N/A no direct navigation but toggles might hide/show certain screens or buttons conditionally. Acceptance Criteria: 1. The app successfully loads environment variables Supabase URL/keys TXAgent URL ElevenLabs API key etc from a secure source. 2. Feature flags voice features emergency detection etc are defined and can be checked in code to conditionally enable those features. 3. No sensitive keys are hard-coded in the repository all are referenced via config. 4. Running the app with a properly filled .env yields no missing key errors and the features behave according to the toggles." --label "phase:0,frontend,expo"

gh issue create --title "Build base reusable UI components and theme" --body "Description: Establish a set of reusable UI components to ensure design consistency across the app. Leverage the React Native Reusables library for common UI elements like buttons inputs cards as per project guidelines. Create custom wrapper components if needed in a components/ directory: for example components/SymptomCard.tsx to display symptom info in a consistent card style refactoring the styling currently duplicated in Dashboard and Symptoms screens, components/VoiceInput.tsx for a microphone button with recording state UI, and a BaseButton and BaseTextInput that wrap RNR components with app theming. Define a global theme colors font styles and apply it throughout ensuring all text uses the Inter font already loaded. The goal is to avoid directly using raw View Text etc in screens and instead use these reusable components for faster development and uniform look. File Paths: components/SymptomCard.tsx components/VoiceInput.tsx components/BaseButton.tsx components/BaseTextInput.tsx etc. Update screens like app/(tabs)/index.tsx and app/(tabs)/symptoms.tsx to use SymptomCard instead of inline JSX for each symptom entry and use BaseButton where a styled TouchableOpacity was used etc. Component Reuse: This issue itself creates the reusable components. They should encapsulate styling logic from multiple places like card border radius padding etc which is repeated. RNR components like Button Input from the library should be utilized inside these base components or directly with consistent styling tokens. Data Sources: N/A UI library setup only. Expo Router Navigation: N/A no navigation changes though these components will be used in various screens. Acceptance Criteria: 1. A set of core components Buttons TextInputs Cards etc is available in the components/ folder using React Native Reusables library elements under the hood. 2. Visual style is consistent all primary buttons share the same color and font all cards have uniform padding and shadow. 3. Existing screens have been refactored to use these components no duplicate style definitions scattered around. 4. Adding a new screen in the future can be done by composing these base components ensuring rapid development and design consistency." --label "phase:0,frontend,expo,typescript"

# CREATE JUNE 19 - 2025
# Creating issue in savevsgames/Symptom_Savior
# https://github.com/savevsgames/Symptom_Savior/issues/1
# Creating issue in savevsgames/Symptom_Savior
# https://github.com/savevsgames/Symptom_Savior/issues/2
# Creating issue in savevsgames/Symptom_Savior
# https://github.com/savevsgames/Symptom_Savior/issues/3